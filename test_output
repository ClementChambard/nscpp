TranslationUnitDecl
├─ NamespaceDecl <line:5:0, line:7:8> ns
│  ╰─ FunctionDecl <line:6:0, line:6:76> report_assertion_failure 'void (char const *, char const *, char const *, int)'
│     ├─ ParamVarDecl <line:6:30, line:6:41> char const *
│     ├─ ParamVarDecl <line:6:44, line:6:55> char const *
│     ├─ ParamVarDecl <line:6:58, line:6:69> char const *
│     ╰─ ParamVarDecl <line:6:72, line:6:74> int
╰─ FunctionDecl <line:2:0, line:5:32> main 'int (int, char * *)'
   ├─ ParamVarDecl <line:2:9, line:2:16> argc int
   ├─ ParamVarDecl <line:2:19, line:2:29> argv char * *
   ╰─ CompoundStmt <line:2:0, line:5:32>
      ├─ FunctionCallExpr <line:3:2, line:3:36>
      │  ├─ IdentExpr <line:3:2, line:3:12> NS_ASSERT_M
      │  ├─ BinaryOpExpr <line:3:14, line:3:23> '=='
      │  │  ├─ BinaryOpExpr <line:3:14, line:3:18> '+'
      │  │  │  ├─ LitteralExpr <line:3:14, line:3:14> Int(1, I32)
      │  │  │  ╰─ LitteralExpr <line:3:18, line:3:18> Int(1, I32)
      │  │  ╰─ LitteralExpr <line:3:23, line:3:23> Int(2, I32)
      │  ╰─ LitteralExpr <line:3:26, line:3:35> String("Oh oh...", Char)
      ╰─ ReturnStmt <line:4:2, line:4:19>
         ╰─ FunctionCallExpr <line:4:9, line:4:18>
            ├─ IdentExpr <line:4:9, line:4:11> ADD
            ├─ LitteralExpr <line:4:13, line:4:13> Int(1, I32)
            ╰─ UnaryOpExpr <line:4:16, line:4:17> '-'
               ╰─ LitteralExpr <line:4:17, line:4:17> Int(1, I32)
