#[derive(Copy, Clone, PartialEq, Eq, Debug)]
pub enum PunctType {
    LBrace,
    RBrace,
    LBracket,
    RBracket,
    LParens,
    RParens,
    Semi,
    Colon,
    Question,
    Dot,
    Compl,
    Not,
    Plus,
    Minus,
    Star,
    Slash,
    Percent,
    Xor,
    And,
    Or,
    Eq,
    Lt,
    Gt,
    Comma,
    Elipsis,
    ColonColon,
    DotStar,
    Arrow,
    ArrowStar,
    PlusEq,
    MinusEq,
    StarEq,
    SlashEq,
    PercentEq,
    XorEq,
    AndEq,
    OrEq,
    EqEq,
    NotEq,
    Le,
    Ge,
    Spaceship,
    AndAnd,
    OrOr,
    Lshift,
    Rshift,
    LshiftEq,
    RshiftEq,
    PlusPlus,
    MinusMinus,
}

impl PunctType {
    pub fn read(p: String) -> Self {
        match &p[..] {
            "{" | "<%" => Self::LBrace,
            "}" | "%>" => Self::RBrace,
            "[" | "<:" => Self::LBracket,
            "]" | ":>" => Self::RBracket,
            "(" => Self::LParens,
            ")" => Self::RParens,
            ";" => Self::Semi,
            ":" => Self::Colon,
            "?" => Self::Question,
            "." => Self::Dot,
            "~" => Self::Compl,
            "!" => Self::Not,
            "+" => Self::Plus,
            "-" => Self::Minus,
            "*" => Self::Star,
            "/" => Self::Slash,
            "%" => Self::Percent,
            "^" => Self::Xor,
            "&" => Self::And,
            "|" => Self::Or,
            "=" => Self::Eq,
            "<" => Self::Lt,
            ">" => Self::Gt,
            "," => Self::Comma,
            "..." => Self::Elipsis,
            "::" => Self::ColonColon,
            ".*" => Self::DotStar,
            "->" => Self::Arrow,
            "->*" => Self::ArrowStar,
            "+=" => Self::PlusEq,
            "-=" => Self::MinusEq,
            "*=" => Self::StarEq,
            "/=" => Self::SlashEq,
            "%=" => Self::PercentEq,
            "^=" => Self::XorEq,
            "&=" => Self::AndEq,
            "|=" => Self::OrEq,
            "==" => Self::EqEq,
            "!=" => Self::NotEq,
            "<=" => Self::Le,
            ">=" => Self::Ge,
            "<=>" => Self::Spaceship,
            "&&" => Self::AndAnd,
            "||" => Self::OrOr,
            "<<" => Self::Lshift,
            ">>" => Self::Rshift,
            "<<=" => Self::LshiftEq,
            ">>=" => Self::RshiftEq,
            "++" => Self::PlusPlus,
            "--" => Self::MinusMinus,
            _ => unreachable!("{} is not a valid punctuator", p),
        }
    }

    pub fn get_str(&self) -> &'static str {
        match self {
            Self::LBrace => "{",
            Self::RBrace => "}",
            Self::LBracket => "[",
            Self::RBracket => "]",
            Self::LParens => "(",
            Self::RParens => ")",
            Self::Semi => ";",
            Self::Colon => ":",
            Self::Question => "?",
            Self::Dot => ".",
            Self::Compl => "~",
            Self::Not => "!",
            Self::Plus => "+",
            Self::Minus => "-",
            Self::Star => "*",
            Self::Slash => "/",
            Self::Percent => "%",
            Self::Xor => "^",
            Self::And => "&",
            Self::Or => "|",
            Self::Eq => "=",
            Self::Lt => "<",
            Self::Gt => ">",
            Self::Comma => ",",
            Self::Elipsis => "...",
            Self::ColonColon => "::",
            Self::DotStar => ".*",
            Self::Arrow => "->",
            Self::ArrowStar => "->*",
            Self::PlusEq => "+=",
            Self::MinusEq => "-=",
            Self::StarEq => "*=",
            Self::SlashEq => "/=",
            Self::PercentEq => "%=",
            Self::XorEq => "^=",
            Self::AndEq => "&=",
            Self::OrEq => "|=",
            Self::EqEq => "==",
            Self::NotEq => "!=",
            Self::Le => "<=",
            Self::Ge => ">=",
            Self::Spaceship => "<=>",
            Self::AndAnd => "&&",
            Self::OrOr => "||",
            Self::Lshift => "<<",
            Self::Rshift => ">>",
            Self::LshiftEq => "<<=",
            Self::RshiftEq => ">>=",
            Self::PlusPlus => "++",
            Self::MinusMinus => "--",
        }
    }
}
